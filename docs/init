Hello Bryan,
 
I have included the infrastructure problem below.  As a general rule, we allow one week from the date that you receive this email to submit your code. Let me know if you need more time so I can update the team on when we should expect it.
 
If you have any questions about the problem send me an email and I will give you an update as quickly as possible.
 
Note:
Please use the URL at the bottom of this email to submit your code.
System security is very important to us and certain file extensions will be blocked for security purposes, resulting in delays to your application. You should NOT include any executable attachments, including those with .exe or .lib extensions. We need to be able to run and build your code ourselves, so please submit your code as a zipped file of source code and supporting files, without any compiled code. **Executables include asp, bat, class, cmd, com, cpl, dll, exe, fon, hta, ini, ins, iw, jar, jsp, js, jse, pif, scr, shs, sh, vb, vbe, vbs, ws, wsc, wsf, wsh & msi
 
{Copyright 2012 ThoughtWorks, Inc. | This material is ThoughtWorks Proprietary and Confidential Information, copying and distribution is strictly prohibited.} We ask that you extend the professional courtesy of not posting your solution online (ie. Bitbucket or Github).
 
Thanks!
 
===========================================================================
  
Infrastructure Problem
 
Background
 
A development team has created a Java web app that is ready for a limited release (with reduced availability and reliability requirements).  If the limited release is successful, the app will be rolled out for worldwide use. Once fully public, the application needs to be available 24/7 and must provide sub-second response times and continuity through single-server failures.
 
Basic problem
You need to create two environments - one for training and one for production. You should prepare the production environments for the limited release and plan for the scale out during fully public release.
 
Assumptions
You have free rein to incorporate any software tools and hardware you need to streamline application deployment and infrastructure provisioning & configuration as long as they are Free/Libre/Open Source software (FLOSS). We request that you use Linux.
The development team has a continuous integration build that produces two artifacts:
a .zip file with the image and stylesheet used for the application
a .war file with the dynamic parts of the application
You should deploy the static assets to a web server and the .war file to a separate application server. Any compatible servers are acceptable.
The app (companyNews) uses Prevayler for persistence. Prevayler essentially persists data to a file. The dev team chose this to simplify the development effort, rather than having to deal with an RDBMS.
 
Expected output for this problem 
 
Simply put, we want you to design and create the training and production environments, and provide a plan to scale out that deployment when the application goes public. You should use a virtualization solution such as VirtualBox for these environments. We do not want you to deliver the VMs to us. Instead you should provide scripts/documentation to enable us to build the environments ourselves very easily. We will use VirtualBox, VMWare or EC2 (your choice) to build your environments. (If you have another virtualization solution you would like to use please ping us first).
 
You are expected to deliver the following within 1 week:
The ability for us to build your environments, in scripts and/or documentation.
Links to any images needed to build your environments.
A plan for scaling the public release including hardware and software implications. This can include documents, diagrams and/or configuration scripts. If you see any issues scaling this application tell us about it and suggestions you have for resolving the issues.
A narrative of the approach taken.
What principles did you apply?
Explanation of the decisions you made and why.
What end state do you envision (if you run out of time to implement)?
Why were certain tools selected?
Why you configured the tools as you did?
What is your recommendation for future work if time allows?
The is a pretty open-ended problem. Donâ€™t spend 100 hours on it. If implementing special features of your environments will take hours, just write an explanation of what you would do.
 
If you have any questions, please let us know. Good luck!
 
Please submit here: http://app.greenhouse.io/tests/133a971717cde7f3f7d0128b9a821aae
